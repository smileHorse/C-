/* soapServer.cpp
   Generated by gSOAP 2.8.53 for calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.53 2019-08-10 05:38:58 GMT")
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	soap->keep_alive = soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->keep_alive > 0 && soap->max_keep_alive > 0)
			soap->keep_alive--;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if ((soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap))) && soap->error && soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:add"))
		return soap_serve_ns2__add(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:sub"))
		return soap_serve_ns2__sub(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:mul"))
		return soap_serve_ns2__mul(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:div"))
		return soap_serve_ns2__div(soap);
	if (!soap_match_tag(soap, soap->tag, "ns2:pow"))
		return soap_serve_ns2__pow(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__add(struct soap *soap)
{	struct ns2__add soap_tmp_ns2__add;
	struct ns2__addResponse soap_tmp_ns2__addResponse;
	soap_default_ns2__addResponse(soap, &soap_tmp_ns2__addResponse);
	soap_default_ns2__add(soap, &soap_tmp_ns2__add);
	if (!soap_get_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__add(soap, soap_tmp_ns2__add.a, soap_tmp_ns2__add.b, soap_tmp_ns2__addResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__addResponse(soap, &soap_tmp_ns2__addResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__addResponse(soap, &soap_tmp_ns2__addResponse, "ns2:addResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__addResponse(soap, &soap_tmp_ns2__addResponse, "ns2:addResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__sub(struct soap *soap)
{	struct ns2__sub soap_tmp_ns2__sub;
	struct ns2__subResponse soap_tmp_ns2__subResponse;
	soap_default_ns2__subResponse(soap, &soap_tmp_ns2__subResponse);
	soap_default_ns2__sub(soap, &soap_tmp_ns2__sub);
	if (!soap_get_ns2__sub(soap, &soap_tmp_ns2__sub, "ns2:sub", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__sub(soap, soap_tmp_ns2__sub.a, soap_tmp_ns2__sub.b, soap_tmp_ns2__subResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__subResponse(soap, &soap_tmp_ns2__subResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__subResponse(soap, &soap_tmp_ns2__subResponse, "ns2:subResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__subResponse(soap, &soap_tmp_ns2__subResponse, "ns2:subResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__mul(struct soap *soap)
{	struct ns2__mul soap_tmp_ns2__mul;
	struct ns2__mulResponse soap_tmp_ns2__mulResponse;
	soap_default_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse);
	soap_default_ns2__mul(soap, &soap_tmp_ns2__mul);
	if (!soap_get_ns2__mul(soap, &soap_tmp_ns2__mul, "ns2:mul", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__mul(soap, soap_tmp_ns2__mul.a, soap_tmp_ns2__mul.b, soap_tmp_ns2__mulResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse, "ns2:mulResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse, "ns2:mulResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__div(struct soap *soap)
{	struct ns2__div soap_tmp_ns2__div;
	struct ns2__divResponse soap_tmp_ns2__divResponse;
	soap_default_ns2__divResponse(soap, &soap_tmp_ns2__divResponse);
	soap_default_ns2__div(soap, &soap_tmp_ns2__div);
	if (!soap_get_ns2__div(soap, &soap_tmp_ns2__div, "ns2:div", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__div(soap, soap_tmp_ns2__div.a, soap_tmp_ns2__div.b, soap_tmp_ns2__divResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__divResponse(soap, &soap_tmp_ns2__divResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__divResponse(soap, &soap_tmp_ns2__divResponse, "ns2:divResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__divResponse(soap, &soap_tmp_ns2__divResponse, "ns2:divResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns2__pow(struct soap *soap)
{	struct ns2__pow soap_tmp_ns2__pow;
	struct ns2__powResponse soap_tmp_ns2__powResponse;
	soap_default_ns2__powResponse(soap, &soap_tmp_ns2__powResponse);
	soap_default_ns2__pow(soap, &soap_tmp_ns2__pow);
	if (!soap_get_ns2__pow(soap, &soap_tmp_ns2__pow, "ns2:pow", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns2__pow(soap, soap_tmp_ns2__pow.a, soap_tmp_ns2__pow.b, soap_tmp_ns2__powResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__powResponse(soap, &soap_tmp_ns2__powResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__powResponse(soap, &soap_tmp_ns2__powResponse, "ns2:powResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__powResponse(soap, &soap_tmp_ns2__powResponse, "ns2:powResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
