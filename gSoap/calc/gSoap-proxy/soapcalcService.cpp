/* soapcalcService.cpp
   Generated by gSOAP 2.8.53 for calc.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapcalcService.h"

calcService::calcService() : soap(SOAP_IO_DEFAULT)
{	calcService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

calcService::calcService(const calcService& rhs)
{	soap_copy_context(this, &rhs);
}

calcService::calcService(const struct soap &_soap) : soap(_soap)
{ }

calcService::calcService(soap_mode iomode) : soap(iomode)
{	calcService_init(iomode, iomode);
}

calcService::calcService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	calcService_init(imode, omode);
}

calcService::~calcService()
{
	this->destroy();
}

void calcService::calcService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns2", "urn:calc", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void calcService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void calcService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	calcService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
calcService *calcService::copy()
{	calcService *dup = SOAP_NEW_COPY(calcService(*(struct soap*)this));
	return dup;
}
#endif

calcService& calcService::operator=(const calcService& rhs)
{	soap_copy_context(this, &rhs);
	return *this;
}

int calcService::soap_close_socket()
{	return soap_closesock(this);
}

int calcService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int calcService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int calcService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int calcService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int calcService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void calcService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void calcService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *calcService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void calcService::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *calcService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int calcService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int calcService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET calcService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET calcService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int calcService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int calcService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns2__add(calcService*);
static int serve_ns2__sub(calcService*);
static int serve_ns2__mul(calcService*);
static int serve_ns2__div(calcService*);
static int serve_ns2__pow(calcService*);

int calcService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns2:add"))
		return serve_ns2__add(this);
	if (!soap_match_tag(this, this->tag, "ns2:sub"))
		return serve_ns2__sub(this);
	if (!soap_match_tag(this, this->tag, "ns2:mul"))
		return serve_ns2__mul(this);
	if (!soap_match_tag(this, this->tag, "ns2:div"))
		return serve_ns2__div(this);
	if (!soap_match_tag(this, this->tag, "ns2:pow"))
		return serve_ns2__pow(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns2__add(calcService *soap)
{	struct ns2__add soap_tmp_ns2__add;
	struct ns2__addResponse soap_tmp_ns2__addResponse;
	soap_default_ns2__addResponse(soap, &soap_tmp_ns2__addResponse);
	soap_default_ns2__add(soap, &soap_tmp_ns2__add);
	if (!soap_get_ns2__add(soap, &soap_tmp_ns2__add, "ns2:add", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->add(soap_tmp_ns2__add.a, soap_tmp_ns2__add.b, soap_tmp_ns2__addResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__addResponse(soap, &soap_tmp_ns2__addResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__addResponse(soap, &soap_tmp_ns2__addResponse, "ns2:addResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__addResponse(soap, &soap_tmp_ns2__addResponse, "ns2:addResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__sub(calcService *soap)
{	struct ns2__sub soap_tmp_ns2__sub;
	struct ns2__subResponse soap_tmp_ns2__subResponse;
	soap_default_ns2__subResponse(soap, &soap_tmp_ns2__subResponse);
	soap_default_ns2__sub(soap, &soap_tmp_ns2__sub);
	if (!soap_get_ns2__sub(soap, &soap_tmp_ns2__sub, "ns2:sub", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->sub(soap_tmp_ns2__sub.a, soap_tmp_ns2__sub.b, soap_tmp_ns2__subResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__subResponse(soap, &soap_tmp_ns2__subResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__subResponse(soap, &soap_tmp_ns2__subResponse, "ns2:subResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__subResponse(soap, &soap_tmp_ns2__subResponse, "ns2:subResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__mul(calcService *soap)
{	struct ns2__mul soap_tmp_ns2__mul;
	struct ns2__mulResponse soap_tmp_ns2__mulResponse;
	soap_default_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse);
	soap_default_ns2__mul(soap, &soap_tmp_ns2__mul);
	if (!soap_get_ns2__mul(soap, &soap_tmp_ns2__mul, "ns2:mul", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->mul(soap_tmp_ns2__mul.a, soap_tmp_ns2__mul.b, soap_tmp_ns2__mulResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse, "ns2:mulResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__mulResponse(soap, &soap_tmp_ns2__mulResponse, "ns2:mulResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__div(calcService *soap)
{	struct ns2__div soap_tmp_ns2__div;
	struct ns2__divResponse soap_tmp_ns2__divResponse;
	soap_default_ns2__divResponse(soap, &soap_tmp_ns2__divResponse);
	soap_default_ns2__div(soap, &soap_tmp_ns2__div);
	if (!soap_get_ns2__div(soap, &soap_tmp_ns2__div, "ns2:div", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->div(soap_tmp_ns2__div.a, soap_tmp_ns2__div.b, soap_tmp_ns2__divResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__divResponse(soap, &soap_tmp_ns2__divResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__divResponse(soap, &soap_tmp_ns2__divResponse, "ns2:divResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__divResponse(soap, &soap_tmp_ns2__divResponse, "ns2:divResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns2__pow(calcService *soap)
{	struct ns2__pow soap_tmp_ns2__pow;
	struct ns2__powResponse soap_tmp_ns2__powResponse;
	soap_default_ns2__powResponse(soap, &soap_tmp_ns2__powResponse);
	soap_default_ns2__pow(soap, &soap_tmp_ns2__pow);
	if (!soap_get_ns2__pow(soap, &soap_tmp_ns2__pow, "ns2:pow", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->pow(soap_tmp_ns2__pow.a, soap_tmp_ns2__pow.b, soap_tmp_ns2__powResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns2__powResponse(soap, &soap_tmp_ns2__powResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__powResponse(soap, &soap_tmp_ns2__powResponse, "ns2:powResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__powResponse(soap, &soap_tmp_ns2__powResponse, "ns2:powResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
